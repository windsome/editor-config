(add-to-list 'load-path "~/.libs.emacs/")
(require 'xcscope)

(add-to-list 'load-path "~/.libs.emacs/color_theme/")
(require 'color-theme)



;;(display-time)
(setq default-tab-width 4)

;; Visual feedback on selections
(setq-default transient-mark-mode t)


;; show column number
(setq column-number-mode t)

;; no backup file
(setq-default make-backup-files nil)

;; replace yes/no with y/n
(fset 'yes-or-no-p 'y-or-n-p)

;; disable pc bell
(setq visible-bell t)

;; kill the line wihle hit C-k
;;(setq-default kill-whole-line t)

;; no startup screen
(setq inhibit-startup-message t)

;; show absulute pathname of the buffer.
(setq frame-title-format "%f")

;; show another parentheses but jump to it.
(show-paren-mode t)
(setq show-paren-style 'parentheses)

;; while cursor close to mouse, let mouse away
(mouse-avoidance-mode 'animate)

;;(frame-parameter nil 'font)

;;;; close  tool
;; (tool-bar-mode nil)
;; (menu-bar-mode t)
;;(scroll-bar-mode nil)

;; set time-stamp
(add-hook 'write-file-hooks 'time-stamp)
(setq time-stamp-format "%:u %02m/%02d/%04y %02H02M02S")

(global-set-key "\M-g" 'goto-line)

;; list all the lines of the current buffer matching a regrep
(global-set-key "\M-o" 'occur)

;; reference or search in files.
(global-set-key (kbd "C-M-z") 'grep-find)


(setq adaptive-fill-regexp "[ \t]+\\|[ \t]*\\([0-9]+\\.\\|\\*+\\)[ \t]*")

;; password displayed as *
(add-hook 'comint-output-filter-funtions
                  'comint-watch-for-password-promt)

; Fontlock mode settings.
(global-font-lock-mode t)

;; (setq font-lock-maximum-decoration t)
;; (setq font-lock-support-mode 'lazy-lock-mode)

(set-default-font "-b&h-lucidatypewriter-bold-r-normal-sans-14-100-100-100-m-80-iso10646-1")

;; set the default replying addr of my email address!!!!
;;(setq mail-default-reply-to "richard_luo@alphanetworks.com")

(require 'session)
(add-hook 'after-init-hook 'session-initialize)

(defun noorul/copy-word-to-clipboard ()
"Copies the word after the cursor into the clipboard."
  (interactive)
  (mark-word 1)
  (kill-ring-save (region-beginning) (region-end) )
)

(global-set-key (kbd "C-c C-j") 'noorul/copy-word-to-clipboard)

;; settings of cvs
(setq cvs-dired-use-hook 'always)
(define-key global-map "\C-xve" 'cvs-examine)

;;---------------------------------------------------
(add-hook 'c-mode-hook
'(lambda ()
(c-set-style "stroustrup")))

;;set c++ style as stroustrup style
(add-hook 'c++-mode-hook
'(lambda()
(c-set-style "stroustrup")))

;;---------------------------------------------------
;; Rebind C-z to start a shell (use .emacs_shellname for the shells rc file)
(global-set-key "\C-z" 'shell)

;; This binds word completions to Shift-Tab, and Ctrl+Space
;;(global-set-key [S-iso-lefttab] 'dabbrev-completion)

;; Set up some f-key shortcuts
(global-set-key [f1]'man)
(global-set-key [f2]    'save-buffer)
(global-set-key [f3]    'find-file)

(global-set-key [f4]    'kill-this-buffer)
(global-set-key [S-f4]  'kill-buffer);shift + f4

(global-set-key [f5]    'compile)
(global-set-key [S-f5]'gud-cont)

(global-set-key [f6]    'first-error)
(global-set-key [f7]    'previous-error)
(global-set-key [f8]    'next-error)

(global-set-key [f9]'gud-break) 
;;(global-set-key [S-f9]'gud-remove) ;; shift + f9

(global-set-key [f10]'gud-next)

(global-set-key [f11]'gud-step)
;;(global-set-key [S-f11] 'gud-finish) 

(global-set-key [f12]'gud-down) ;; F12
;;(global-set-key [S-f12]'gud-up)

;;; Win-space, set mark
(global-set-key (kbd "H-s-SPC") 'set-mark-command)

;;;---------------------------------------
;; (load "desktop")
;; (desktop-load-default)
;; (desktop-read)

(require 'ibuffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)

(require 'browse-kill-ring)
(global-set-key [(control c)(k)] 'browse-kill-ring)
(browse-kill-ring-default-keybindings)

(require 'ido)
(ido-mode t)


(add-hook 'ido-define-mode-map-hook 'ido-my-keys)

(defun ido-my-keys ()
  "Set up the keymap for `ido'."

  ;; common keys
  (define-key ido-mode-map "\C-e" 'ido-edit-input)
  (define-key ido-mode-map "\t" 'ido-complete) ;; complete partial
  (define-key ido-mode-map "\C-j" 'ido-select-text)
  (define-key ido-mode-map "\C-m" 'ido-exit-minibuffer)
  (define-key ido-mode-map "?" 'ido-completion-help) ;; list completions
  (define-key ido-mode-map [(control ? )] 'ido-restrict-to-matches)
  (define-key ido-mode-map [(control ?@)] 'ido-restrict-to-matches)

  ;; cycle through matches
  (define-key ido-mode-map "\C-r" 'ido-prev-match)
  (define-key ido-mode-map "\C-s" 'ido-next-match)
  (define-key ido-mode-map [right] 'ido-next-match)
  (define-key ido-mode-map [left] 'ido-prev-match)


  ;; toggles
  (define-key ido-mode-map "\C-t" 'ido-toggle-regexp) ;; same as in isearch
  (define-key ido-mode-map "\C-p" 'ido-toggle-prefix)
  (define-key ido-mode-map "\C-c" 'ido-toggle-case)
  (define-key ido-mode-map "\C-a" 'ido-toggle-ignore)

  ;; keys used in file and dir environment
  (when (memq ido-cur-item '(file dir))
    (define-key ido-mode-map "\C-b" 'ido-enter-switch-buffer)
    (define-key ido-mode-map "\C-d" 'ido-enter-dired)
    (define-key ido-mode-map "\C-f" 'ido-fallback-command)

    ;; cycle among directories
    ;; use [left] and [right] for matching files
    (define-key ido-mode-map [down] 'ido-next-match-dir)
    (define-key ido-mode-map [up]   'ido-prev-match-dir)

    ;; backspace functions
    (define-key ido-mode-map [backspace] 'ido-delete-backward-updir)
    (define-key ido-mode-map "\d"        'ido-delete-backward-updir)
    (define-key ido-mode-map [(meta backspace)] 'ido-delete-backward-word-updir)
    (define-key ido-mode-map [(control backspace)] 'ido-up-directory)

    ;; I can't understand this
    (define-key ido-mode-map [(meta ?d)] 'ido-wide-find-dir)
    (define-key ido-mode-map [(meta ?f)] 'ido-wide-find-file)
    (define-key ido-mode-map [(meta ?k)] 'ido-forget-work-directory)
    (define-key ido-mode-map [(meta ?m)] 'ido-make-directory)

    (define-key ido-mode-map [(meta down)] 'ido-next-work-directory)
    (define-key ido-mode-map [(meta up)] 'ido-prev-work-directory)
    (define-key ido-mode-map [(meta left)] 'ido-prev-work-file)
    (define-key ido-mode-map [(meta right)] 'ido-next-work-file)

    ;; search in the directories
    ;; use C-_ to undo this
    (define-key ido-mode-map [(meta ?s)] 'ido-merge-work-directories)
    (define-key ido-mode-map [(control ?\_)] 'ido-undo-merge-work-directory)
    )

  (when (eq ido-cur-item 'file)
    (define-key ido-mode-map "\C-k" 'ido-delete-file-at-head)
    (define-key ido-mode-map "\C-l" 'ido-toggle-literal)
    (define-key ido-mode-map "\C-o" 'ido-copy-current-word)
    (define-key ido-mode-map "\C-v" 'ido-toggle-vc)
    (define-key ido-mode-map "\C-w" 'ido-copy-current-file-name)
    )

  (when (eq ido-cur-item 'buffer)
    (define-key ido-mode-map "\C-b" 'ido-fallback-command)
    (define-key ido-mode-map "\C-f" 'ido-enter-find-file)
    (define-key ido-mode-map "\C-k" 'ido-kill-buffer-at-head)
    ))

(ido-mode t)

(require 'swbuff)

(global-set-key [C-prior] 'swbuff-switch-to-previous-buffer)
(global-set-key [C-next] 'swbuff-switch-to-next-buffer)

(setq swbuff-exclude-buffer-regexps
     '("^ " "\\*.*\\*"))
(setq swbuff-status-window-layout 'scroll)
(setq swbuff-clear-delay 3)
(setq swbuff-separator "|")
(setq swbuff-window-min-text-height 1)

(require 'tabbar)
(tabbar-mode)

(global-set-key [H-s-up] 'tabbar-backward-group)
(global-set-key [H-s-down] 'tabbar-forward-group)

(global-set-key [H-s-left] 'tabbar-backward)
(global-set-key [H-s-right] 'tabbar-forward)


(setq tabbar-cycling-scope (quote tabs))
(custom-set-faces
 '(tabbar-default-face
   ((t (:inherit variable-pitch
                 :background "gray90"
                 :foreground "gray60"
                 :height 0.8))))
 '(tabbar-selected-face
   ((t (:inherit tabbar-default-face
                 :foreground "darkred"
                 :box (:line-width 2 :color "white" :style pressed-button)))))
 '(tabbar-unselected-face
   ((t (:inherit tabbar-default-face
                 :foreground "black"
                 :box (:line-width 2 :color "white" :style released-button))))))

(autoload 'table-insert "table" "WYGIWYS table editor")
;;-------------------------------------------------------------------------
(global-set-key "%" 'match-paren)

(defun match-paren (arg)
  "Go to the matching paren if on a paren; otherwise insert %."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1) (backward-char 1))
        ((looking-at "\\s\)") (forward-char 1) (backward-list 1))
        (t (self-insert-command (or arg 1)))))
;;-------------------------------------------------------------------------

(global-set-key [(control ?\.)] 'ska-point-to-register)
(global-set-key [(control ?\,)] 'ska-jump-to-register)
(defun ska-point-to-register()
  "Store cursorposition _fast_ in a register.
Use ska-jump-to-register to jump back to the stored
position."
  (interactive)
  (setq zmacs-region-stays t)
  (point-to-register 8))


(defun ska-jump-to-register()
  "Switches between current cursorposition and position
that was stored with ska-point-to-register."
  (interactive)
  (setq zmacs-region-stays t)
  (let ((tmp (point-marker)))
        (jump-to-register 8)
        (set-register 8 tmp)))

;;----------------------------------------------------------------------
(defun wy-go-to-char (n char)
  "Move forward to Nth occurence of CHAR.
Typing `wy-go-to-char-key' again will move forwad to the next Nth
occurence of CHAR."
  (interactive "p\ncGo to char: ")
  (search-forward (string char) nil nil n)
  (while (char-equal (read-char)
                     char)
    (search-forward (string char) nil nil n))

  (setq unread-command-events (list last-input-event)))

;;(define-key global-map (kbd "H-s-c") 'wy-go-to-char)
(define-key global-map (kbd "H-s-a") 'wy-go-to-char)
(define-key global-map (kbd "M-n") 'wy-go-to-char)
(define-key global-map (kbd "C-c n") 'wy-go-to-char)

;; (defun go-to-whitespace (arg)
;;   "Search forward for a whitespace."
;;   (interactive "p")
;;   (re-search-forward " \\|\n\\|\t" nil nil arg))
;; (define-key global-map (kbd "C-c w") 'go-to-whitespace)



;;hide region
(require 'hide-region)
(global-set-key (kbd "C-c r") 'hide-region-hide)
(global-set-key (kbd "C-c R") 'hide-region-unhide)

;; hide lines
(require 'hide-lines)
(global-set-key (kbd "C-c l") 'hide-lines)
(global-set-key (kbd "C-c L") 'show-all-invisible)


;;--------------------------------------------------------------------
(autoload 'mmm-mode "mmm-mode" "Multiple Major Modes" t)
(autoload 'mmm-parse-buffer "mmm-mode" "Automatic MMM-ification" t)
;;--------------------------------------------------------------------
(require 'ctypes)
(ctypes-auto-parse-mode 1)
;;--------------------------------------------------------------------
(require 'recentf)
(recentf-mode 1)
;;--------------------------------------------------------------------
(defun recentf-open-files-compl ()
  (interactive)
  (let* ((all-files recentf-list)
         (tocpl (mapcar (function
                         (lambda (x) (cons (file-name-nondirectory x) x))) all-files))
         (prompt (append '("File name: ") tocpl))
         (fname (completing-read (car prompt) (cdr prompt) nil nil)))
    (find-file (cdr (assoc-ignore-representation fname tocpl)))))
(global-set-key [(control x)(control r)] 'recentf-open-files-compl)
;;--------------------------------------------------------------------
(global-set-key [(meta ?/)] 'hippie-expand)

(setq hippie-expand-try-functions-list
      '(try-expand-dabbrev
        try-expand-dabbrev-visible
        try-expand-dabbrev-all-buffers
        try-expand-dabbrev-from-kill
        try-complete-file-name-partially
        try-complete-file-name
        try-expand-all-abbrevs
        try-expand-list
        try-expand-line
        try-complete-lisp-symbol-partially
        try-complete-lisp-symbol))
;;--------------------------------------------------------------------
(custom-set-variables
  ;; custom-set-variables was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 '(auto-compression-mode t nil (jka-compr))
 '(case-fold-search t)
 '(global-font-lock-mode t nil (font-lock))
 '(show-paren-mode t nil (paren))
 '(transient-mark-mode t))
(custom-set-faces
  ;; custom-set-faces was added by Custom -- don't edit or cut/paste it!
  ;; Your init file should contain only one such instance.
 )

;; ;; SEMANTIC BOVINATOR
;; (require 'semantic-c) ; for C code integration
;; (require 'semantic-el) ; for Emacs Lisp code integration
;; (require 'semantic-make) ; for Makefile integration
;; (require 'semantic-imenu) ; if you use imenu or wich-function
;; (add-hook 'speedbar-load-hook (lambda () (require 'semantic-sb)))
;;                         ; for speedbar integration
;; (autoload 'semantic-bnf-mode "semantic-bnf" "Mode for Bovine Normal Form." t)
;; (add-to-list 'auto-mode-alist '("\\.bnf$" . semantic-bnf-mode))
;;                         ; for editing .bnf parser files.
;; (autoload 'semantic-minor-mode "semantic-mode" "Mode managing semantic parsing."
;;  t)


(setq dired-recursive-deletes t) ;
(setq dired-recursive-copies t)  ;
(require 'dired-x)               ;
(setq dired-guess-shell-alist-user
      (list
       (list "\\.chm$" "xchm")
       (list "\\.rm$" "gmplayer")
       (list "\\.rmvb$" "gmplayer")
       (list "\\.avi$" "gmplayer")
       (list "\\.asf$" "gmplayer")
       (list "\\.wmv$" "gmplayer")
       (list "\\.htm$" "w3m")
       (list "\\.html$" "w3m")
       (list "\\.mpg$" "gmplayer")
      )
 ) ;


;; (global-set-key [(meta .)] '(lambda () (interactive) (lev/find-tag t)))
;; (global-set-key [(meta ,)] 'delete-other-windows)

;;(global-set-key (kbd "M-.") 'lev/find-tag)

;;(global-set-key (kbd "M-,") 'pop-tag-mark)

;; (global-set-key [(meta .)] '(lambda () (interactive) (lev/find-tag t)))
;; (global-set-key [(meta ,)] 'delete-other-windows)
;; (global-set-key (kbd "C-.") 'lev/find-tag)
;; (global-set-key (kbd "C-,") 'pop-tag-mark)
;; (global-set-key (kbd "C-M-,") 'find-tag)

(defun lev/find-tag (&optional show-only)
  "Show tag in other window with no prompt in minibuf."
  (interactive)
  (let ((default (funcall (or find-tag-default-function
                              (get major-mode 'find-tag-default-function)
                              'find-tag-default))))
    (if show-only
        (progn (find-tag-other-window default)
               (shrink-window (- (window-height) 12)) ;; limit to 12 colums
               (recenter 1)
               (other-window 1))
      (find-tag default))))

(setq dired-recursive-deletes t) ;
(setq dired-recursive-copies t)  ;
(require 'dired-x)               ;
(setq dired-guess-shell-alist-user
      (list
       (list "\\.chm$" "xchm")
       (list "\\.rm$" "gmplayer")
       (list "\\.rmvb$" "gmplayer")
       (list "\\.avi$" "gmplayer")
       (list "\\.asf$" "gmplayer")
       (list "\\.wmv$" "gmplayer")
       (list "\\.htm$" "w3m")
       (list "\\.html$" "w3m")
       (list "\\.mpg$" "gmplayer")
      )
 ) ;

;; from WY, to open photograph
(auto-image-file-mode)
(setq user-full-name "Richard")
(setq user-mail-address "rihcard_luo@alphanetworks.com")

;; (setq last-go-to-char "")

;; (defun go-to-char (arg char)
;;   "Go to ARG'th occurrence of CHAR.
;; Case is ignored if `case-fold-search' is non-nil in the current buffer.
;; Goes backward if ARG is negative; error if CHAR not found."
;;   (interactive "p\ncGo to char: ")
;;   (setq last-go-to-char (char-to-string char))
;;   (search-forward last-go-to-char nil nil arg))

;; (defun go-to-char-again (arg)
;;   "Repeat the previous go-to-char command."
;;   (interactive "p")
;;   (search-forward last-go-to-char nil nil arg))

;; (defun go-to-whitespace-not-whitespace (arg)
;;   "Search forward for a whitespace followed by a non-whitespace."
;;   (interactive "p")
;;   (re-search-forward "[ \n\t][^ \n\t]" nil nil arg)
;;   (goto-char (- (point) 1)))

;; (define-key global-map (kbd "C-c f") 'go-to-char)
;; (define-key global-map (kbd "C-c ;") 'go-to-char-again)
;; (define-key global-map (kbd "C-c W") 'go-to-whitespace-not-whitespace)




(defun scroll-up-half ()
  "Scroll up half a page."
  (interactive)
  (scroll-up (/ (window-height) 2))
)

(defun scroll-down-half ()
  "Scroll down half a page."
  (interactive)
  (scroll-down (/ (window-height) 2))
)




(setq dired-omit-files-p t)
(setq dired-omit-files
      (concat dired-omit-files "\\|^\\..+$"))


;;(color-theme-parus)
(color-theme-billw)